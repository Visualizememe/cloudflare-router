{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cloudflare-Router A library for easily processing incoming requests to Cloudflare Workers. Created with TypeScript! This module is super-easy to use, and it's plug-and-play. Literally. All you have to do to start is to tell the module when you want to process a request, and it will handle everything for you. In order to tell the module when it should process a request (or more specifically ,telling the router ): const { Router } = require(\"cloudflare-router\"); const router = new Router(); const apiRouter = new Router(); // Connecting routers router.use(\"/api\", apiRouter); // Setting up paths router.get(\"/\", (req, res) => res.text(\"Hello, world!\")); apiRouter.get(\"/\", (req, res) => res.text(\"Welcome to the API!\")); apiRouter.get(\"/welcome/:name\", (req, res) => res.text(`Welcome, ${req.params.name}`)); // Listening for requests addEventListener(\"fetch\", event => { // Minimal boilerplate required event.respondWith( router.serve(event.request) .then(res => res.response) ); }); Installing Simply enter the following command into your terminal: npm install cloudflare-router","title":"Home"},{"location":"#cloudflare-router","text":"A library for easily processing incoming requests to Cloudflare Workers. Created with TypeScript! This module is super-easy to use, and it's plug-and-play. Literally. All you have to do to start is to tell the module when you want to process a request, and it will handle everything for you. In order to tell the module when it should process a request (or more specifically ,telling the router ): const { Router } = require(\"cloudflare-router\"); const router = new Router(); const apiRouter = new Router(); // Connecting routers router.use(\"/api\", apiRouter); // Setting up paths router.get(\"/\", (req, res) => res.text(\"Hello, world!\")); apiRouter.get(\"/\", (req, res) => res.text(\"Welcome to the API!\")); apiRouter.get(\"/welcome/:name\", (req, res) => res.text(`Welcome, ${req.params.name}`)); // Listening for requests addEventListener(\"fetch\", event => { // Minimal boilerplate required event.respondWith( router.serve(event.request) .then(res => res.response) ); });","title":"Cloudflare-Router"},{"location":"#installing","text":"Simply enter the following command into your terminal: npm install cloudflare-router","title":"Installing"},{"location":"modules/","text":"cloudflare-router Table of contents Modules Router RouterRequest RouterResponse index interfaces","title":"cloudflare-router"},{"location":"modules/#cloudflare-router","text":"","title":"cloudflare-router"},{"location":"modules/#table-of-contents","text":"","title":"Table of contents"},{"location":"modules/#modules","text":"Router RouterRequest RouterResponse index interfaces","title":"Modules"},{"location":"classes/router.route/","text":"Class: Route<AdditionalDataType> Router .Route Type parameters Name Type AdditionalDataType unknown Table of contents Constructors constructor Properties handler isMiddleware isRouterHandler method path router Methods match matchPath Constructors constructor + new Route <AdditionalDataType>( router : Router <AdditionalDataType>, options : RouteOptions <AdditionalDataType>): Route <AdditionalDataType> Creates a new Route Type parameters: Name Type AdditionalDataType unknown Parameters: Name Type router Router <AdditionalDataType> options RouteOptions <AdditionalDataType> Returns: Route <AdditionalDataType> Defined in: Router.ts:111 Properties handler \u2022 handler : RouteHandler <AdditionalDataType> The function that will be called if the incoming request matches the criteria for this route Defined in: Router.ts:101 isMiddleware \u2022 isMiddleware : boolean If the route provided is a middleware or not, this will affect how the incoming request will be processed by this route. Defined in: Router.ts:107 isRouterHandler \u2022 isRouterHandler : boolean If the handler is a Router Defined in: Router.ts:111 method \u2022 method : Methods The method this route accepts Defined in: Router.ts:82 path \u2022 path : object Type declaration: Name Type Description formattedPath string The path the library has parsed and formatted / fixed accordingly inputPath string The path provided to the library pattern UrlPattern The URL pattern used for matching incoming requests Defined in: Router.ts:83 router \u2022 router : Router <AdditionalDataType> The router that created this route Defined in: Router.ts:77 Methods match \u25b8 match ( request : RouterRequest <AdditionalDataType>): object Parameters: Name Type request RouterRequest <AdditionalDataType> Returns: object Name Type doesMatch boolean pathMatch unknown Defined in: Router.ts:140 matchPath \u25b8 matchPath ( request : RouterRequest <AdditionalDataType>): unknown Parameters: Name Type request RouterRequest <AdditionalDataType> Returns: unknown Defined in: Router.ts:136","title":"Class: Route<AdditionalDataType\\>"},{"location":"classes/router.route/#class-routeadditionaldatatype","text":"Router .Route","title":"Class: Route&lt;AdditionalDataType>"},{"location":"classes/router.route/#type-parameters","text":"Name Type AdditionalDataType unknown","title":"Type parameters"},{"location":"classes/router.route/#table-of-contents","text":"","title":"Table of contents"},{"location":"classes/router.route/#constructors","text":"constructor","title":"Constructors"},{"location":"classes/router.route/#properties","text":"handler isMiddleware isRouterHandler method path router","title":"Properties"},{"location":"classes/router.route/#methods","text":"match matchPath","title":"Methods"},{"location":"classes/router.route/#constructors_1","text":"","title":"Constructors"},{"location":"classes/router.route/#constructor","text":"+ new Route <AdditionalDataType>( router : Router <AdditionalDataType>, options : RouteOptions <AdditionalDataType>): Route <AdditionalDataType> Creates a new Route","title":"constructor"},{"location":"classes/router.route/#type-parameters_1","text":"Name Type AdditionalDataType unknown","title":"Type parameters:"},{"location":"classes/router.route/#parameters","text":"Name Type router Router <AdditionalDataType> options RouteOptions <AdditionalDataType> Returns: Route <AdditionalDataType> Defined in: Router.ts:111","title":"Parameters:"},{"location":"classes/router.route/#properties_1","text":"","title":"Properties"},{"location":"classes/router.route/#handler","text":"\u2022 handler : RouteHandler <AdditionalDataType> The function that will be called if the incoming request matches the criteria for this route Defined in: Router.ts:101","title":"handler"},{"location":"classes/router.route/#ismiddleware","text":"\u2022 isMiddleware : boolean If the route provided is a middleware or not, this will affect how the incoming request will be processed by this route. Defined in: Router.ts:107","title":"isMiddleware"},{"location":"classes/router.route/#isrouterhandler","text":"\u2022 isRouterHandler : boolean If the handler is a Router Defined in: Router.ts:111","title":"isRouterHandler"},{"location":"classes/router.route/#method","text":"\u2022 method : Methods The method this route accepts Defined in: Router.ts:82","title":"method"},{"location":"classes/router.route/#path","text":"\u2022 path : object","title":"path"},{"location":"classes/router.route/#type-declaration","text":"Name Type Description formattedPath string The path the library has parsed and formatted / fixed accordingly inputPath string The path provided to the library pattern UrlPattern The URL pattern used for matching incoming requests Defined in: Router.ts:83","title":"Type declaration:"},{"location":"classes/router.route/#router","text":"\u2022 router : Router <AdditionalDataType> The router that created this route Defined in: Router.ts:77","title":"router"},{"location":"classes/router.route/#methods_1","text":"","title":"Methods"},{"location":"classes/router.route/#match","text":"\u25b8 match ( request : RouterRequest <AdditionalDataType>): object","title":"match"},{"location":"classes/router.route/#parameters_1","text":"Name Type request RouterRequest <AdditionalDataType> Returns: object Name Type doesMatch boolean pathMatch unknown Defined in: Router.ts:140","title":"Parameters:"},{"location":"classes/router.route/#matchpath","text":"\u25b8 matchPath ( request : RouterRequest <AdditionalDataType>): unknown","title":"matchPath"},{"location":"classes/router.route/#parameters_2","text":"Name Type request RouterRequest <AdditionalDataType> Returns: unknown Defined in: Router.ts:136","title":"Parameters:"},{"location":"classes/router.router-1/","text":"Class: Router<AdditionalDataType> Router .Router Type parameters Name Type AdditionalDataType unknown Table of contents Constructors constructor Properties basePath customResponseTransformer isWaterfall main parent routes Methods createRoute createRouteAndAddInternally createUrlPattern delete findMatchingRoutes fixPath get getMainRouter head options post serve setBasePath setParentRouter use Constructors constructor + new Router <AdditionalDataType>( options? : RouterOptions <AdditionalDataType>): Router <AdditionalDataType> Creates a new Router Type parameters: Name Type AdditionalDataType unknown Parameters: Name Type options RouterOptions <AdditionalDataType> Returns: Router <AdditionalDataType> Defined in: Router.ts:196 Properties basePath \u2022 basePath : string Defined in: Router.ts:183 customResponseTransformer \u2022 Optional customResponseTransformer : undefined | ( data : { body : BodyType ; contentType : string ; cookies : Record <string, string> ; headers : Record <string, string> ; redirect? : undefined | { url : string } ; response? : undefined | Response ; status : string ; statusCode : number ; tasks : Promise [] ; type : *normal* \\| *redirect* }) => unknown Defined in: Router.ts:186 isWaterfall \u2022 isWaterfall : boolean Defined in: Router.ts:184 main \u2022 main : Router <AdditionalDataType> The main Router Defined in: Router.ts:196 parent \u2022 parent : null | Router <AdditionalDataType> The \"parent\" of all the routers, which will be processing the incoming requests Defined in: Router.ts:191 routes \u2022 routes : Route <AdditionalDataType>[] Defined in: Router.ts:185 Methods createRoute \u25b8 createRoute ( options : RouteOptions <AdditionalDataType>): Route <AdditionalDataType> Used internally for creating a route with a certain method Parameters: Name Type options RouteOptions <AdditionalDataType> Returns: Route <AdditionalDataType> Defined in: Router.ts:298 createRouteAndAddInternally \u25b8 createRouteAndAddInternally ( options : RouteOptions <AdditionalDataType>): Route <AdditionalDataType> Parameters: Name Type options RouteOptions <AdditionalDataType> Returns: Route <AdditionalDataType> Defined in: Router.ts:311 createUrlPattern \u25b8 createUrlPattern ( path : string ): UrlPattern Creating a URLPattern instance based on the input path (NOTE: MUST HAVE WENT THROUGH Router.fixPath first!) Parameters: Name Type path string Returns: UrlPattern Defined in: Router.ts:406 delete \u25b8 delete ( path : string , handler : RouteFunctionHandler <AdditionalDataType>): void Parameters: Name Type path string handler RouteFunctionHandler <AdditionalDataType> Returns: void Defined in: Router.ts:376 findMatchingRoutes \u25b8 findMatchingRoutes ( request : RouterRequest <AdditionalDataType>): MatchingRoute <AdditionalDataType>[] Parameters: Name Type request RouterRequest <AdditionalDataType> Returns: MatchingRoute <AdditionalDataType>[] Defined in: Router.ts:225 fixPath \u25b8 fixPath ( path : string ): string Fixing the input path to make sure it's consistent in regards of the slashes (/) Parameters: Name Type path string Returns: string Defined in: Router.ts:391 get \u25b8 get ( path : string , handler : RouteHandler <AdditionalDataType>): void Parameters: Name Type path string handler RouteHandler <AdditionalDataType> Returns: void Defined in: Router.ts:340 getMainRouter \u25b8 getMainRouter (): Router <AdditionalDataType> Recursively goes up and finds the main router Returns: Router <AdditionalDataType> Defined in: Router.ts:217 head \u25b8 head ( path : string , handler : RouteFunctionHandler <AdditionalDataType>): void Parameters: Name Type path string handler RouteFunctionHandler <AdditionalDataType> Returns: void Defined in: Router.ts:367 options \u25b8 options ( path : string , handler : RouteFunctionHandler <AdditionalDataType>): void Parameters: Name Type path string handler RouteFunctionHandler <AdditionalDataType> Returns: void Defined in: Router.ts:358 post \u25b8 post ( path : string , handler : RouteHandler <AdditionalDataType>): void Parameters: Name Type path string handler RouteHandler <AdditionalDataType> Returns: void Defined in: Router.ts:349 serve \u25b8 serve ( request : IncomingRequest | RouterRequest <AdditionalDataType>, additionalData? : AdditionalDataType, response? : RouterResponse <AdditionalDataType>): Promise < BuiltResponse <AdditionalDataType>> Parameters: Name Type request IncomingRequest | RouterRequest <AdditionalDataType> additionalData? AdditionalDataType response? RouterResponse <AdditionalDataType> Returns: Promise < BuiltResponse <AdditionalDataType>> Defined in: Router.ts:247 setBasePath \u25b8 Private setBasePath ( path? : string , fixRoutes? : boolean ): string Sets the base path for the Router, and updates all the belonging routes with the new base path Returns a string with the new base path Parameters: Name Type path? string fixRoutes? boolean Returns: string Defined in: Router.ts:418 setParentRouter \u25b8 Private setParentRouter ( parent : Router <AdditionalDataType>): void Parameters: Name Type parent Router <AdditionalDataType> Returns: void Defined in: Router.ts:445 use \u25b8 use ( path : string , handler : RouteHandler <AdditionalDataType>): void Parameters: Name Type path string handler RouteHandler <AdditionalDataType> Returns: void Defined in: Router.ts:319","title":"Class: Router<AdditionalDataType\\>"},{"location":"classes/router.router-1/#class-routeradditionaldatatype","text":"Router .Router","title":"Class: Router&lt;AdditionalDataType>"},{"location":"classes/router.router-1/#type-parameters","text":"Name Type AdditionalDataType unknown","title":"Type parameters"},{"location":"classes/router.router-1/#table-of-contents","text":"","title":"Table of contents"},{"location":"classes/router.router-1/#constructors","text":"constructor","title":"Constructors"},{"location":"classes/router.router-1/#properties","text":"basePath customResponseTransformer isWaterfall main parent routes","title":"Properties"},{"location":"classes/router.router-1/#methods","text":"createRoute createRouteAndAddInternally createUrlPattern delete findMatchingRoutes fixPath get getMainRouter head options post serve setBasePath setParentRouter use","title":"Methods"},{"location":"classes/router.router-1/#constructors_1","text":"","title":"Constructors"},{"location":"classes/router.router-1/#constructor","text":"+ new Router <AdditionalDataType>( options? : RouterOptions <AdditionalDataType>): Router <AdditionalDataType> Creates a new Router","title":"constructor"},{"location":"classes/router.router-1/#type-parameters_1","text":"Name Type AdditionalDataType unknown","title":"Type parameters:"},{"location":"classes/router.router-1/#parameters","text":"Name Type options RouterOptions <AdditionalDataType> Returns: Router <AdditionalDataType> Defined in: Router.ts:196","title":"Parameters:"},{"location":"classes/router.router-1/#properties_1","text":"","title":"Properties"},{"location":"classes/router.router-1/#basepath","text":"\u2022 basePath : string Defined in: Router.ts:183","title":"basePath"},{"location":"classes/router.router-1/#customresponsetransformer","text":"\u2022 Optional customResponseTransformer : undefined | ( data : { body : BodyType ; contentType : string ; cookies : Record <string, string> ; headers : Record <string, string> ; redirect? : undefined | { url : string } ; response? : undefined | Response ; status : string ; statusCode : number ; tasks : Promise [] ; type : *normal* \\| *redirect* }) => unknown Defined in: Router.ts:186","title":"customResponseTransformer"},{"location":"classes/router.router-1/#iswaterfall","text":"\u2022 isWaterfall : boolean Defined in: Router.ts:184","title":"isWaterfall"},{"location":"classes/router.router-1/#main","text":"\u2022 main : Router <AdditionalDataType> The main Router Defined in: Router.ts:196","title":"main"},{"location":"classes/router.router-1/#parent","text":"\u2022 parent : null | Router <AdditionalDataType> The \"parent\" of all the routers, which will be processing the incoming requests Defined in: Router.ts:191","title":"parent"},{"location":"classes/router.router-1/#routes","text":"\u2022 routes : Route <AdditionalDataType>[] Defined in: Router.ts:185","title":"routes"},{"location":"classes/router.router-1/#methods_1","text":"","title":"Methods"},{"location":"classes/router.router-1/#createroute","text":"\u25b8 createRoute ( options : RouteOptions <AdditionalDataType>): Route <AdditionalDataType> Used internally for creating a route with a certain method","title":"createRoute"},{"location":"classes/router.router-1/#parameters_1","text":"Name Type options RouteOptions <AdditionalDataType> Returns: Route <AdditionalDataType> Defined in: Router.ts:298","title":"Parameters:"},{"location":"classes/router.router-1/#createrouteandaddinternally","text":"\u25b8 createRouteAndAddInternally ( options : RouteOptions <AdditionalDataType>): Route <AdditionalDataType>","title":"createRouteAndAddInternally"},{"location":"classes/router.router-1/#parameters_2","text":"Name Type options RouteOptions <AdditionalDataType> Returns: Route <AdditionalDataType> Defined in: Router.ts:311","title":"Parameters:"},{"location":"classes/router.router-1/#createurlpattern","text":"\u25b8 createUrlPattern ( path : string ): UrlPattern Creating a URLPattern instance based on the input path (NOTE: MUST HAVE WENT THROUGH Router.fixPath first!)","title":"createUrlPattern"},{"location":"classes/router.router-1/#parameters_3","text":"Name Type path string Returns: UrlPattern Defined in: Router.ts:406","title":"Parameters:"},{"location":"classes/router.router-1/#delete","text":"\u25b8 delete ( path : string , handler : RouteFunctionHandler <AdditionalDataType>): void","title":"delete"},{"location":"classes/router.router-1/#parameters_4","text":"Name Type path string handler RouteFunctionHandler <AdditionalDataType> Returns: void Defined in: Router.ts:376","title":"Parameters:"},{"location":"classes/router.router-1/#findmatchingroutes","text":"\u25b8 findMatchingRoutes ( request : RouterRequest <AdditionalDataType>): MatchingRoute <AdditionalDataType>[]","title":"findMatchingRoutes"},{"location":"classes/router.router-1/#parameters_5","text":"Name Type request RouterRequest <AdditionalDataType> Returns: MatchingRoute <AdditionalDataType>[] Defined in: Router.ts:225","title":"Parameters:"},{"location":"classes/router.router-1/#fixpath","text":"\u25b8 fixPath ( path : string ): string Fixing the input path to make sure it's consistent in regards of the slashes (/)","title":"fixPath"},{"location":"classes/router.router-1/#parameters_6","text":"Name Type path string Returns: string Defined in: Router.ts:391","title":"Parameters:"},{"location":"classes/router.router-1/#get","text":"\u25b8 get ( path : string , handler : RouteHandler <AdditionalDataType>): void","title":"get"},{"location":"classes/router.router-1/#parameters_7","text":"Name Type path string handler RouteHandler <AdditionalDataType> Returns: void Defined in: Router.ts:340","title":"Parameters:"},{"location":"classes/router.router-1/#getmainrouter","text":"\u25b8 getMainRouter (): Router <AdditionalDataType> Recursively goes up and finds the main router Returns: Router <AdditionalDataType> Defined in: Router.ts:217","title":"getMainRouter"},{"location":"classes/router.router-1/#head","text":"\u25b8 head ( path : string , handler : RouteFunctionHandler <AdditionalDataType>): void","title":"head"},{"location":"classes/router.router-1/#parameters_8","text":"Name Type path string handler RouteFunctionHandler <AdditionalDataType> Returns: void Defined in: Router.ts:367","title":"Parameters:"},{"location":"classes/router.router-1/#options","text":"\u25b8 options ( path : string , handler : RouteFunctionHandler <AdditionalDataType>): void","title":"options"},{"location":"classes/router.router-1/#parameters_9","text":"Name Type path string handler RouteFunctionHandler <AdditionalDataType> Returns: void Defined in: Router.ts:358","title":"Parameters:"},{"location":"classes/router.router-1/#post","text":"\u25b8 post ( path : string , handler : RouteHandler <AdditionalDataType>): void","title":"post"},{"location":"classes/router.router-1/#parameters_10","text":"Name Type path string handler RouteHandler <AdditionalDataType> Returns: void Defined in: Router.ts:349","title":"Parameters:"},{"location":"classes/router.router-1/#serve","text":"\u25b8 serve ( request : IncomingRequest | RouterRequest <AdditionalDataType>, additionalData? : AdditionalDataType, response? : RouterResponse <AdditionalDataType>): Promise < BuiltResponse <AdditionalDataType>>","title":"serve"},{"location":"classes/router.router-1/#parameters_11","text":"Name Type request IncomingRequest | RouterRequest <AdditionalDataType> additionalData? AdditionalDataType response? RouterResponse <AdditionalDataType> Returns: Promise < BuiltResponse <AdditionalDataType>> Defined in: Router.ts:247","title":"Parameters:"},{"location":"classes/router.router-1/#setbasepath","text":"\u25b8 Private setBasePath ( path? : string , fixRoutes? : boolean ): string Sets the base path for the Router, and updates all the belonging routes with the new base path Returns a string with the new base path","title":"setBasePath"},{"location":"classes/router.router-1/#parameters_12","text":"Name Type path? string fixRoutes? boolean Returns: string Defined in: Router.ts:418","title":"Parameters:"},{"location":"classes/router.router-1/#setparentrouter","text":"\u25b8 Private setParentRouter ( parent : Router <AdditionalDataType>): void","title":"setParentRouter"},{"location":"classes/router.router-1/#parameters_13","text":"Name Type parent Router <AdditionalDataType> Returns: void Defined in: Router.ts:445","title":"Parameters:"},{"location":"classes/router.router-1/#use","text":"\u25b8 use ( path : string , handler : RouteHandler <AdditionalDataType>): void","title":"use"},{"location":"classes/router.router-1/#parameters_14","text":"Name Type path string handler RouteHandler <AdditionalDataType> Returns: void Defined in: Router.ts:319","title":"Parameters:"},{"location":"classes/routerrequest.routerrequest-1/","text":"Class: RouterRequest<AdditionalDataType> RouterRequest .RouterRequest Type parameters Name Type AdditionalDataType unknown Table of contents Constructors constructor Properties additionalData body bodyUsed cookies data headers method params path query request route url urlData Methods parseHeaders setParams setRoute fixRequestUrl Constructors constructor + new RouterRequest <AdditionalDataType>( request : IncomingRequest , additionalData? : AdditionalDataType): RouterRequest <AdditionalDataType> Type parameters: Name Type AdditionalDataType unknown Parameters: Name Type request IncomingRequest additionalData? AdditionalDataType Returns: RouterRequest <AdditionalDataType> Defined in: RouterRequest.ts:38 Properties additionalData \u2022 additionalData : null | AdditionalDataType Defined in: RouterRequest.ts:9 body \u2022 Optional body : unknown The body if existent Defined in: RouterRequest.ts:32 bodyUsed \u2022 bodyUsed : boolean Defined in: RouterRequest.ts:15 cookies \u2022 cookies : Record <string, string> Defined in: RouterRequest.ts:17 data \u2022 data : Map <any, any> Allows for middlewares to add data to the request type-safe Defined in: RouterRequest.ts:22 headers \u2022 headers : Record <string, string> Defined in: RouterRequest.ts:16 method \u2022 method : Methods Defined in: RouterRequest.ts:14 params \u2022 Optional params : undefined | Record <string, string> The params for the route, if any NOTE: This will be set by the Router once the fitting route has been found Defined in: RouterRequest.ts:38 path \u2022 path : string Defined in: RouterRequest.ts:12 query \u2022 query : ParsedUrlQuery Defined in: RouterRequest.ts:13 request \u2022 request : IncomingRequest Defined in: RouterRequest.ts:8 route \u2022 Optional route : undefined | Route <AdditionalDataType> The route that was found with the request Defined in: RouterRequest.ts:27 url \u2022 url : string Defined in: RouterRequest.ts:10 urlData \u2022 urlData : URL Defined in: RouterRequest.ts:11 Methods parseHeaders \u25b8 Private parseHeaders (): void Returns: void Defined in: RouterRequest.ts:72 setParams \u25b8 setParams ( params : Record <string, string>): void Parameters: Name Type params Record <string, string> Returns: void Defined in: RouterRequest.ts:68 setRoute \u25b8 setRoute ( route : Route <AdditionalDataType>): void Parameters: Name Type route Route <AdditionalDataType> Returns: void Defined in: RouterRequest.ts:64 fixRequestUrl \u25b8 Static fixRequestUrl ( url : string ): string Parameters: Name Type url string Returns: string Defined in: RouterRequest.ts:57","title":"Class: RouterRequest<AdditionalDataType\\>"},{"location":"classes/routerrequest.routerrequest-1/#class-routerrequestadditionaldatatype","text":"RouterRequest .RouterRequest","title":"Class: RouterRequest&lt;AdditionalDataType>"},{"location":"classes/routerrequest.routerrequest-1/#type-parameters","text":"Name Type AdditionalDataType unknown","title":"Type parameters"},{"location":"classes/routerrequest.routerrequest-1/#table-of-contents","text":"","title":"Table of contents"},{"location":"classes/routerrequest.routerrequest-1/#constructors","text":"constructor","title":"Constructors"},{"location":"classes/routerrequest.routerrequest-1/#properties","text":"additionalData body bodyUsed cookies data headers method params path query request route url urlData","title":"Properties"},{"location":"classes/routerrequest.routerrequest-1/#methods","text":"parseHeaders setParams setRoute fixRequestUrl","title":"Methods"},{"location":"classes/routerrequest.routerrequest-1/#constructors_1","text":"","title":"Constructors"},{"location":"classes/routerrequest.routerrequest-1/#constructor","text":"+ new RouterRequest <AdditionalDataType>( request : IncomingRequest , additionalData? : AdditionalDataType): RouterRequest <AdditionalDataType>","title":"constructor"},{"location":"classes/routerrequest.routerrequest-1/#type-parameters_1","text":"Name Type AdditionalDataType unknown","title":"Type parameters:"},{"location":"classes/routerrequest.routerrequest-1/#parameters","text":"Name Type request IncomingRequest additionalData? AdditionalDataType Returns: RouterRequest <AdditionalDataType> Defined in: RouterRequest.ts:38","title":"Parameters:"},{"location":"classes/routerrequest.routerrequest-1/#properties_1","text":"","title":"Properties"},{"location":"classes/routerrequest.routerrequest-1/#additionaldata","text":"\u2022 additionalData : null | AdditionalDataType Defined in: RouterRequest.ts:9","title":"additionalData"},{"location":"classes/routerrequest.routerrequest-1/#body","text":"\u2022 Optional body : unknown The body if existent Defined in: RouterRequest.ts:32","title":"body"},{"location":"classes/routerrequest.routerrequest-1/#bodyused","text":"\u2022 bodyUsed : boolean Defined in: RouterRequest.ts:15","title":"bodyUsed"},{"location":"classes/routerrequest.routerrequest-1/#cookies","text":"\u2022 cookies : Record <string, string> Defined in: RouterRequest.ts:17","title":"cookies"},{"location":"classes/routerrequest.routerrequest-1/#data","text":"\u2022 data : Map <any, any> Allows for middlewares to add data to the request type-safe Defined in: RouterRequest.ts:22","title":"data"},{"location":"classes/routerrequest.routerrequest-1/#headers","text":"\u2022 headers : Record <string, string> Defined in: RouterRequest.ts:16","title":"headers"},{"location":"classes/routerrequest.routerrequest-1/#method","text":"\u2022 method : Methods Defined in: RouterRequest.ts:14","title":"method"},{"location":"classes/routerrequest.routerrequest-1/#params","text":"\u2022 Optional params : undefined | Record <string, string> The params for the route, if any NOTE: This will be set by the Router once the fitting route has been found Defined in: RouterRequest.ts:38","title":"params"},{"location":"classes/routerrequest.routerrequest-1/#path","text":"\u2022 path : string Defined in: RouterRequest.ts:12","title":"path"},{"location":"classes/routerrequest.routerrequest-1/#query","text":"\u2022 query : ParsedUrlQuery Defined in: RouterRequest.ts:13","title":"query"},{"location":"classes/routerrequest.routerrequest-1/#request","text":"\u2022 request : IncomingRequest Defined in: RouterRequest.ts:8","title":"request"},{"location":"classes/routerrequest.routerrequest-1/#route","text":"\u2022 Optional route : undefined | Route <AdditionalDataType> The route that was found with the request Defined in: RouterRequest.ts:27","title":"route"},{"location":"classes/routerrequest.routerrequest-1/#url","text":"\u2022 url : string Defined in: RouterRequest.ts:10","title":"url"},{"location":"classes/routerrequest.routerrequest-1/#urldata","text":"\u2022 urlData : URL Defined in: RouterRequest.ts:11","title":"urlData"},{"location":"classes/routerrequest.routerrequest-1/#methods_1","text":"","title":"Methods"},{"location":"classes/routerrequest.routerrequest-1/#parseheaders","text":"\u25b8 Private parseHeaders (): void Returns: void Defined in: RouterRequest.ts:72","title":"parseHeaders"},{"location":"classes/routerrequest.routerrequest-1/#setparams","text":"\u25b8 setParams ( params : Record <string, string>): void","title":"setParams"},{"location":"classes/routerrequest.routerrequest-1/#parameters_1","text":"Name Type params Record <string, string> Returns: void Defined in: RouterRequest.ts:68","title":"Parameters:"},{"location":"classes/routerrequest.routerrequest-1/#setroute","text":"\u25b8 setRoute ( route : Route <AdditionalDataType>): void","title":"setRoute"},{"location":"classes/routerrequest.routerrequest-1/#parameters_2","text":"Name Type route Route <AdditionalDataType> Returns: void Defined in: RouterRequest.ts:64","title":"Parameters:"},{"location":"classes/routerrequest.routerrequest-1/#fixrequesturl","text":"\u25b8 Static fixRequestUrl ( url : string ): string","title":"fixRequestUrl"},{"location":"classes/routerrequest.routerrequest-1/#parameters_3","text":"Name Type url string Returns: string Defined in: RouterRequest.ts:57","title":"Parameters:"},{"location":"classes/routerresponse.routerresponse-1/","text":"Class: RouterResponse<AdditionalDataType> RouterResponse .RouterResponse Type parameters Name Type AdditionalDataType any Table of contents Constructors constructor Properties request response route Methods addTasks buildResponse json raw redirect setCookie setCustomResponse setHeader setRoute status statusCode text transformOptions Constructors constructor + new RouterResponse <AdditionalDataType>( request : RouterRequest <AdditionalDataType>): RouterResponse <AdditionalDataType> Type parameters: Name Type AdditionalDataType unknown Parameters: Name Type request RouterRequest <AdditionalDataType> Returns: RouterResponse <AdditionalDataType> Defined in: RouterResponse.ts:58 Properties request \u2022 request : RouterRequest <AdditionalDataType> The processed request Defined in: RouterResponse.ts:34 response \u2022 response : object Internal data for the RouterResponse, to retrieve as normal data call .buildResponse() Type declaration: Name Type Description body BodyType - contentType string - cookies Record <string, string> - headers Record <string, string> - redirect ? undefined | { url : string } If we want to redirect response ? undefined | Response If the user wants to provide custom response status string - statusCode number - tasks Promise <unknown>[] - type normal | redirect - Defined in: RouterResponse.ts:39 route \u2022 Optional route : undefined | Route <AdditionalDataType> The route that initiated by the request Defined in: RouterResponse.ts:29 Methods addTasks \u25b8 addTasks ( tasks : Promise <unknown> | Promise <unknown>[]): RouterResponse <AdditionalDataType> Parameters: Name Type tasks Promise <unknown> | Promise <unknown>[] Returns: RouterResponse <AdditionalDataType> Defined in: RouterResponse.ts:111 buildResponse \u25b8 buildResponse (): BuiltResponse <AdditionalDataType> Returns: BuiltResponse <AdditionalDataType> Defined in: RouterResponse.ts:162 json \u25b8 json ( data : unknown ): RouterResponse <AdditionalDataType> Parameters: Name Type data unknown Returns: RouterResponse <AdditionalDataType> Defined in: RouterResponse.ts:78 raw \u25b8 raw ( body : BodyType , contentType : string ): RouterResponse <AdditionalDataType> Parameters: Name Type body BodyType contentType string Returns: RouterResponse <AdditionalDataType> Defined in: RouterResponse.ts:85 redirect \u25b8 redirect ( url : string , statusCode : number ): RouterResponse <AdditionalDataType> Parameters: Name Type url string statusCode number Returns: RouterResponse <AdditionalDataType> Defined in: RouterResponse.ts:138 setCookie \u25b8 setCookie ( name : string , value : string , options? : CookieSerializeOptions): RouterResponse <AdditionalDataType> Parameters: Name Type name string value string options? CookieSerializeOptions Returns: RouterResponse <AdditionalDataType> Defined in: RouterResponse.ts:126 setCustomResponse \u25b8 setCustomResponse ( response : Response): RouterResponse <AdditionalDataType> Parameters: Name Type response Response Returns: RouterResponse <AdditionalDataType> Defined in: RouterResponse.ts:148 setHeader \u25b8 setHeader ( name : string , value : string ): RouterResponse <AdditionalDataType> Parameters: Name Type name string value string Returns: RouterResponse <AdditionalDataType> Defined in: RouterResponse.ts:118 setRoute \u25b8 setRoute ( route : Route <AdditionalDataType>): void Parameters: Name Type route Route <AdditionalDataType> Returns: void Defined in: RouterResponse.ts:74 status \u25b8 status ( status : string ): RouterResponse <AdditionalDataType> Parameters: Name Type status string Returns: RouterResponse <AdditionalDataType> Defined in: RouterResponse.ts:99 statusCode \u25b8 statusCode ( statusCode : number ): RouterResponse <AdditionalDataType> Parameters: Name Type statusCode number Returns: RouterResponse <AdditionalDataType> Defined in: RouterResponse.ts:105 text \u25b8 text ( text : string ): RouterResponse <AdditionalDataType> Parameters: Name Type text string Returns: RouterResponse <AdditionalDataType> Defined in: RouterResponse.ts:92 transformOptions \u25b8 transformOptions (): Record <string, unknown> Returns: Record <string, unknown> Defined in: RouterResponse.ts:154","title":"Class: RouterResponse<AdditionalDataType\\>"},{"location":"classes/routerresponse.routerresponse-1/#class-routerresponseadditionaldatatype","text":"RouterResponse .RouterResponse","title":"Class: RouterResponse&lt;AdditionalDataType>"},{"location":"classes/routerresponse.routerresponse-1/#type-parameters","text":"Name Type AdditionalDataType any","title":"Type parameters"},{"location":"classes/routerresponse.routerresponse-1/#table-of-contents","text":"","title":"Table of contents"},{"location":"classes/routerresponse.routerresponse-1/#constructors","text":"constructor","title":"Constructors"},{"location":"classes/routerresponse.routerresponse-1/#properties","text":"request response route","title":"Properties"},{"location":"classes/routerresponse.routerresponse-1/#methods","text":"addTasks buildResponse json raw redirect setCookie setCustomResponse setHeader setRoute status statusCode text transformOptions","title":"Methods"},{"location":"classes/routerresponse.routerresponse-1/#constructors_1","text":"","title":"Constructors"},{"location":"classes/routerresponse.routerresponse-1/#constructor","text":"+ new RouterResponse <AdditionalDataType>( request : RouterRequest <AdditionalDataType>): RouterResponse <AdditionalDataType>","title":"constructor"},{"location":"classes/routerresponse.routerresponse-1/#type-parameters_1","text":"Name Type AdditionalDataType unknown","title":"Type parameters:"},{"location":"classes/routerresponse.routerresponse-1/#parameters","text":"Name Type request RouterRequest <AdditionalDataType> Returns: RouterResponse <AdditionalDataType> Defined in: RouterResponse.ts:58","title":"Parameters:"},{"location":"classes/routerresponse.routerresponse-1/#properties_1","text":"","title":"Properties"},{"location":"classes/routerresponse.routerresponse-1/#request","text":"\u2022 request : RouterRequest <AdditionalDataType> The processed request Defined in: RouterResponse.ts:34","title":"request"},{"location":"classes/routerresponse.routerresponse-1/#response","text":"\u2022 response : object Internal data for the RouterResponse, to retrieve as normal data call .buildResponse()","title":"response"},{"location":"classes/routerresponse.routerresponse-1/#type-declaration","text":"Name Type Description body BodyType - contentType string - cookies Record <string, string> - headers Record <string, string> - redirect ? undefined | { url : string } If we want to redirect response ? undefined | Response If the user wants to provide custom response status string - statusCode number - tasks Promise <unknown>[] - type normal | redirect - Defined in: RouterResponse.ts:39","title":"Type declaration:"},{"location":"classes/routerresponse.routerresponse-1/#route","text":"\u2022 Optional route : undefined | Route <AdditionalDataType> The route that initiated by the request Defined in: RouterResponse.ts:29","title":"route"},{"location":"classes/routerresponse.routerresponse-1/#methods_1","text":"","title":"Methods"},{"location":"classes/routerresponse.routerresponse-1/#addtasks","text":"\u25b8 addTasks ( tasks : Promise <unknown> | Promise <unknown>[]): RouterResponse <AdditionalDataType>","title":"addTasks"},{"location":"classes/routerresponse.routerresponse-1/#parameters_1","text":"Name Type tasks Promise <unknown> | Promise <unknown>[] Returns: RouterResponse <AdditionalDataType> Defined in: RouterResponse.ts:111","title":"Parameters:"},{"location":"classes/routerresponse.routerresponse-1/#buildresponse","text":"\u25b8 buildResponse (): BuiltResponse <AdditionalDataType> Returns: BuiltResponse <AdditionalDataType> Defined in: RouterResponse.ts:162","title":"buildResponse"},{"location":"classes/routerresponse.routerresponse-1/#json","text":"\u25b8 json ( data : unknown ): RouterResponse <AdditionalDataType>","title":"json"},{"location":"classes/routerresponse.routerresponse-1/#parameters_2","text":"Name Type data unknown Returns: RouterResponse <AdditionalDataType> Defined in: RouterResponse.ts:78","title":"Parameters:"},{"location":"classes/routerresponse.routerresponse-1/#raw","text":"\u25b8 raw ( body : BodyType , contentType : string ): RouterResponse <AdditionalDataType>","title":"raw"},{"location":"classes/routerresponse.routerresponse-1/#parameters_3","text":"Name Type body BodyType contentType string Returns: RouterResponse <AdditionalDataType> Defined in: RouterResponse.ts:85","title":"Parameters:"},{"location":"classes/routerresponse.routerresponse-1/#redirect","text":"\u25b8 redirect ( url : string , statusCode : number ): RouterResponse <AdditionalDataType>","title":"redirect"},{"location":"classes/routerresponse.routerresponse-1/#parameters_4","text":"Name Type url string statusCode number Returns: RouterResponse <AdditionalDataType> Defined in: RouterResponse.ts:138","title":"Parameters:"},{"location":"classes/routerresponse.routerresponse-1/#setcookie","text":"\u25b8 setCookie ( name : string , value : string , options? : CookieSerializeOptions): RouterResponse <AdditionalDataType>","title":"setCookie"},{"location":"classes/routerresponse.routerresponse-1/#parameters_5","text":"Name Type name string value string options? CookieSerializeOptions Returns: RouterResponse <AdditionalDataType> Defined in: RouterResponse.ts:126","title":"Parameters:"},{"location":"classes/routerresponse.routerresponse-1/#setcustomresponse","text":"\u25b8 setCustomResponse ( response : Response): RouterResponse <AdditionalDataType>","title":"setCustomResponse"},{"location":"classes/routerresponse.routerresponse-1/#parameters_6","text":"Name Type response Response Returns: RouterResponse <AdditionalDataType> Defined in: RouterResponse.ts:148","title":"Parameters:"},{"location":"classes/routerresponse.routerresponse-1/#setheader","text":"\u25b8 setHeader ( name : string , value : string ): RouterResponse <AdditionalDataType>","title":"setHeader"},{"location":"classes/routerresponse.routerresponse-1/#parameters_7","text":"Name Type name string value string Returns: RouterResponse <AdditionalDataType> Defined in: RouterResponse.ts:118","title":"Parameters:"},{"location":"classes/routerresponse.routerresponse-1/#setroute","text":"\u25b8 setRoute ( route : Route <AdditionalDataType>): void","title":"setRoute"},{"location":"classes/routerresponse.routerresponse-1/#parameters_8","text":"Name Type route Route <AdditionalDataType> Returns: void Defined in: RouterResponse.ts:74","title":"Parameters:"},{"location":"classes/routerresponse.routerresponse-1/#status","text":"\u25b8 status ( status : string ): RouterResponse <AdditionalDataType>","title":"status"},{"location":"classes/routerresponse.routerresponse-1/#parameters_9","text":"Name Type status string Returns: RouterResponse <AdditionalDataType> Defined in: RouterResponse.ts:99","title":"Parameters:"},{"location":"classes/routerresponse.routerresponse-1/#statuscode","text":"\u25b8 statusCode ( statusCode : number ): RouterResponse <AdditionalDataType>","title":"statusCode"},{"location":"classes/routerresponse.routerresponse-1/#parameters_10","text":"Name Type statusCode number Returns: RouterResponse <AdditionalDataType> Defined in: RouterResponse.ts:105","title":"Parameters:"},{"location":"classes/routerresponse.routerresponse-1/#text","text":"\u25b8 text ( text : string ): RouterResponse <AdditionalDataType>","title":"text"},{"location":"classes/routerresponse.routerresponse-1/#parameters_11","text":"Name Type text string Returns: RouterResponse <AdditionalDataType> Defined in: RouterResponse.ts:92","title":"Parameters:"},{"location":"classes/routerresponse.routerresponse-1/#transformoptions","text":"\u25b8 transformOptions (): Record <string, unknown> Returns: Record <string, unknown> Defined in: RouterResponse.ts:154","title":"transformOptions"},{"location":"interfaces/router.routeoptions/","text":"Interface: RouteOptions<AdditionalDataType> Router .RouteOptions Options for creating a new Route Type parameters Name Type AdditionalDataType unknown Table of contents Properties handler isMiddleware method path Properties handler \u2022 handler : RouteHandler <AdditionalDataType> The function that will be called if the incoming request matches the Route's criteria Defined in: Router.ts:43 isMiddleware \u2022 Optional isMiddleware : undefined | boolean Whether this route is a middleware or not NOTE: If the provided handler is instance of Router, this value will be ignored Defined in: Router.ts:53 method \u2022 Optional method : undefined | ANY | GET | POST | PUT | PATCH | OPTIONS | HEAD | DELETE The specified method that this Route will be \"accepting\" Use \"ANY\" if it's any method, default is \"GET\" Defined in: Router.ts:48 path \u2022 path : string The path that this Route will be \"listening\" for, raw Defined in: Router.ts:39","title":"Interface: RouteOptions<AdditionalDataType\\>"},{"location":"interfaces/router.routeoptions/#interface-routeoptionsadditionaldatatype","text":"Router .RouteOptions Options for creating a new Route","title":"Interface: RouteOptions&lt;AdditionalDataType>"},{"location":"interfaces/router.routeoptions/#type-parameters","text":"Name Type AdditionalDataType unknown","title":"Type parameters"},{"location":"interfaces/router.routeoptions/#table-of-contents","text":"","title":"Table of contents"},{"location":"interfaces/router.routeoptions/#properties","text":"handler isMiddleware method path","title":"Properties"},{"location":"interfaces/router.routeoptions/#properties_1","text":"","title":"Properties"},{"location":"interfaces/router.routeoptions/#handler","text":"\u2022 handler : RouteHandler <AdditionalDataType> The function that will be called if the incoming request matches the Route's criteria Defined in: Router.ts:43","title":"handler"},{"location":"interfaces/router.routeoptions/#ismiddleware","text":"\u2022 Optional isMiddleware : undefined | boolean Whether this route is a middleware or not NOTE: If the provided handler is instance of Router, this value will be ignored Defined in: Router.ts:53","title":"isMiddleware"},{"location":"interfaces/router.routeoptions/#method","text":"\u2022 Optional method : undefined | ANY | GET | POST | PUT | PATCH | OPTIONS | HEAD | DELETE The specified method that this Route will be \"accepting\" Use \"ANY\" if it's any method, default is \"GET\" Defined in: Router.ts:48","title":"method"},{"location":"interfaces/router.routeoptions/#path","text":"\u2022 path : string The path that this Route will be \"listening\" for, raw Defined in: Router.ts:39","title":"path"},{"location":"modules/","text":"Module: index Table of contents References Route Router RouterRequest RouterResponse References Route Re-exports: Route Router Re-exports: Router RouterRequest Re-exports: RouterRequest RouterResponse Re-exports: RouterResponse","title":"Module: index"},{"location":"modules/#module-index","text":"","title":"Module: index"},{"location":"modules/#table-of-contents","text":"","title":"Table of contents"},{"location":"modules/#references","text":"Route Router RouterRequest RouterResponse","title":"References"},{"location":"modules/#references_1","text":"","title":"References"},{"location":"modules/#route","text":"Re-exports: Route","title":"Route"},{"location":"modules/#router","text":"Re-exports: Router","title":"Router"},{"location":"modules/#routerrequest","text":"Re-exports: RouterRequest","title":"RouterRequest"},{"location":"modules/#routerresponse","text":"Re-exports: RouterResponse","title":"RouterResponse"},{"location":"modules/interfaces/","text":"Module: interfaces Table of contents Type aliases IncomingEvent IncomingRequest Type aliases IncomingEvent \u01ac IncomingEvent : object Type declaration: Name Type passThroughOnException () => void request IncomingRequest respondWith ( callback : Promise \\| *unknown*) => void type fetch waitUntil ( tasks : Promise ) => void Defined in: interfaces.ts:1 IncomingRequest \u01ac IncomingRequest : object Type declaration: Name Type arrayBuffer () => Promise <ArrayBuffer | null > blob () => Promise <Blob | null > body ReadableStream bodyUsed boolean cf object cf.apps boolean cf.asn string cf.cacheEverything boolean cf.cacheTtl number cf.colo string cf.country string cf.exclusive number cf.group unknown cf.group-weight unknown cf.minify object cf.minify.css boolean cf.minify.html boolean cf.minify.javascript boolean cf.mirage boolean cf.polish lossy | lossless | off cf.resolveOverride string cf.scrapeShield boolean cf.tlsCipher string cf.tlsClientAUth unknown cf.tlsVersion string cf.weight unknown clone () => IncomingRequest fetch () => Promise <Response> formData () => Promise <FormData | null > headers Headers json () => Promise <Record<string, unknown> | unknown[]> method string redirect follow | manual text () => Promise <string | null > url string Defined in: interfaces.ts:9","title":"Module: interfaces"},{"location":"modules/interfaces/#module-interfaces","text":"","title":"Module: interfaces"},{"location":"modules/interfaces/#table-of-contents","text":"","title":"Table of contents"},{"location":"modules/interfaces/#type-aliases","text":"IncomingEvent IncomingRequest","title":"Type aliases"},{"location":"modules/interfaces/#type-aliases_1","text":"","title":"Type aliases"},{"location":"modules/interfaces/#incomingevent","text":"\u01ac IncomingEvent : object","title":"IncomingEvent"},{"location":"modules/interfaces/#type-declaration","text":"Name Type passThroughOnException () => void request IncomingRequest respondWith ( callback : Promise \\| *unknown*) => void type fetch waitUntil ( tasks : Promise ) => void Defined in: interfaces.ts:1","title":"Type declaration:"},{"location":"modules/interfaces/#incomingrequest","text":"\u01ac IncomingRequest : object","title":"IncomingRequest"},{"location":"modules/interfaces/#type-declaration_1","text":"Name Type arrayBuffer () => Promise <ArrayBuffer | null > blob () => Promise <Blob | null > body ReadableStream bodyUsed boolean cf object cf.apps boolean cf.asn string cf.cacheEverything boolean cf.cacheTtl number cf.colo string cf.country string cf.exclusive number cf.group unknown cf.group-weight unknown cf.minify object cf.minify.css boolean cf.minify.html boolean cf.minify.javascript boolean cf.mirage boolean cf.polish lossy | lossless | off cf.resolveOverride string cf.scrapeShield boolean cf.tlsCipher string cf.tlsClientAUth unknown cf.tlsVersion string cf.weight unknown clone () => IncomingRequest fetch () => Promise <Response> formData () => Promise <FormData | null > headers Headers json () => Promise <Record<string, unknown> | unknown[]> method string redirect follow | manual text () => Promise <string | null > url string Defined in: interfaces.ts:9","title":"Type declaration:"},{"location":"modules/router/","text":"Module: Router Table of contents Classes Route Router Interfaces RouteOptions Type aliases Methods RouteFunctionHandler RouteHandler Type aliases Methods \u01ac Methods : ANY | GET | POST | PUT | PATCH | OPTIONS | HEAD | DELETE Methods that can be used for the Route, use \"ANY\" for any methods Default is \"GET\" Defined in: Router.ts:29 RouteFunctionHandler \u01ac RouteFunctionHandler <AdditionalDataType>: ( request : RouterRequest <AdditionalDataType>, response : RouterResponse , additionalData? : AdditionalDataType) => void The function that will be called if the incoming request matches a route's criteria Type parameters: Name AdditionalDataType Type declaration: \u25b8 ( request : RouterRequest <AdditionalDataType>, response : RouterResponse <AdditionalDataType>, additionalData? : AdditionalDataType): void Parameters: Name Type request RouterRequest <AdditionalDataType> response RouterResponse <AdditionalDataType> additionalData? AdditionalDataType Returns: void Defined in: Router.ts:60 RouteHandler \u01ac RouteHandler <AdditionalDataType>: Router <AdditionalDataType> | RouteFunctionHandler <AdditionalDataType> The handler that will be used if the request matches the route's criteria Type parameters: Name Type AdditionalDataType unknown Defined in: Router.ts:66","title":"Module: Router"},{"location":"modules/router/#module-router","text":"","title":"Module: Router"},{"location":"modules/router/#table-of-contents","text":"","title":"Table of contents"},{"location":"modules/router/#classes","text":"Route Router","title":"Classes"},{"location":"modules/router/#interfaces","text":"RouteOptions","title":"Interfaces"},{"location":"modules/router/#type-aliases","text":"Methods RouteFunctionHandler RouteHandler","title":"Type aliases"},{"location":"modules/router/#type-aliases_1","text":"","title":"Type aliases"},{"location":"modules/router/#methods","text":"\u01ac Methods : ANY | GET | POST | PUT | PATCH | OPTIONS | HEAD | DELETE Methods that can be used for the Route, use \"ANY\" for any methods Default is \"GET\" Defined in: Router.ts:29","title":"Methods"},{"location":"modules/router/#routefunctionhandler","text":"\u01ac RouteFunctionHandler <AdditionalDataType>: ( request : RouterRequest <AdditionalDataType>, response : RouterResponse , additionalData? : AdditionalDataType) => void The function that will be called if the incoming request matches a route's criteria","title":"RouteFunctionHandler"},{"location":"modules/router/#type-parameters","text":"Name AdditionalDataType","title":"Type parameters:"},{"location":"modules/router/#type-declaration","text":"\u25b8 ( request : RouterRequest <AdditionalDataType>, response : RouterResponse <AdditionalDataType>, additionalData? : AdditionalDataType): void","title":"Type declaration:"},{"location":"modules/router/#parameters","text":"Name Type request RouterRequest <AdditionalDataType> response RouterResponse <AdditionalDataType> additionalData? AdditionalDataType Returns: void Defined in: Router.ts:60","title":"Parameters:"},{"location":"modules/router/#routehandler","text":"\u01ac RouteHandler <AdditionalDataType>: Router <AdditionalDataType> | RouteFunctionHandler <AdditionalDataType> The handler that will be used if the request matches the route's criteria","title":"RouteHandler"},{"location":"modules/router/#type-parameters_1","text":"Name Type AdditionalDataType unknown Defined in: Router.ts:66","title":"Type parameters:"},{"location":"modules/routerrequest/","text":"Module: RouterRequest Table of contents Classes RouterRequest","title":"Module: RouterRequest"},{"location":"modules/routerrequest/#module-routerrequest","text":"","title":"Module: RouterRequest"},{"location":"modules/routerrequest/#table-of-contents","text":"","title":"Table of contents"},{"location":"modules/routerrequest/#classes","text":"RouterRequest","title":"Classes"},{"location":"modules/routerresponse/","text":"Module: RouterResponse Table of contents Classes RouterResponse Type aliases BodyType BuiltResponse Type aliases BodyType \u01ac BodyType : string | Blob | ArrayBufferView | ArrayBuffer | FormData | URLSearchParams | ReadableStream <Uint8Array> | null | undefined Defined in: RouterResponse.ts:6 BuiltResponse \u01ac BuiltResponse <AdditionalDataType>: object Type parameters: Name AdditionalDataType Type declaration: Name Type response unknown routerRequest RouterRequest <AdditionalDataType> routerResponse RouterResponse <AdditionalDataType> tasks Promise <unknown>[] Defined in: RouterResponse.ts:17","title":"Module: RouterResponse"},{"location":"modules/routerresponse/#module-routerresponse","text":"","title":"Module: RouterResponse"},{"location":"modules/routerresponse/#table-of-contents","text":"","title":"Table of contents"},{"location":"modules/routerresponse/#classes","text":"RouterResponse","title":"Classes"},{"location":"modules/routerresponse/#type-aliases","text":"BodyType BuiltResponse","title":"Type aliases"},{"location":"modules/routerresponse/#type-aliases_1","text":"","title":"Type aliases"},{"location":"modules/routerresponse/#bodytype","text":"\u01ac BodyType : string | Blob | ArrayBufferView | ArrayBuffer | FormData | URLSearchParams | ReadableStream <Uint8Array> | null | undefined Defined in: RouterResponse.ts:6","title":"BodyType"},{"location":"modules/routerresponse/#builtresponse","text":"\u01ac BuiltResponse <AdditionalDataType>: object","title":"BuiltResponse"},{"location":"modules/routerresponse/#type-parameters","text":"Name AdditionalDataType","title":"Type parameters:"},{"location":"modules/routerresponse/#type-declaration","text":"Name Type response unknown routerRequest RouterRequest <AdditionalDataType> routerResponse RouterResponse <AdditionalDataType> tasks Promise <unknown>[] Defined in: RouterResponse.ts:17","title":"Type declaration:"}]}